/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.2.11.v20150529
 * Generated at: 2020-06-03 15:01:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.View;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import fusioncharts.FusionCharts;
import java.util.logging.*;
import com.mongodb.client.*;
import org.bson.Document;
import com.mongodb.client.model.Filters;

public final class statistics_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>Statistic</title>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\">\r\n");
      out.write("<!--===============================================================================================-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("\thref=\"vendor/bootstrap/css/bootstrap.min.css\">\r\n");
      out.write("<!--===============================================================================================-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("\thref=\"fonts/font-awesome-4.7.0/css/font-awesome.min.css\">\r\n");
      out.write("<!--===============================================================================================-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("\thref=\"fonts/iconic/css/material-design-iconic-font.min.css\">\r\n");
      out.write("<!--===============================================================================================-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"vendor/animate/animate.css\">\r\n");
      out.write("<!--===============================================================================================-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("\thref=\"vendor/css-hamburgers/hamburgers.min.css\">\r\n");
      out.write("<!--===============================================================================================-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("\thref=\"vendor/animsition/css/animsition.min.css\">\r\n");
      out.write("<!--===============================================================================================-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("\thref=\"vendor/select2/select2.min.css\">\r\n");
      out.write("<!--===============================================================================================-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("\thref=\"vendor/daterangepicker/daterangepicker.css\">\r\n");
      out.write("<!--===============================================================================================-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/home_css.css\">\r\n");
      out.write("\r\n");
      out.write("<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\" type=\"text/javascript\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type = \"text/javascript\" src = \"https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js\"> </script> <script type = \"text/javascript\"\r\n");
      out.write("src = \"https://cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.fusion.js\"> </script>\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("/* Always set the map height explicitly to define the size of the div\r\n");
      out.write("       * element that contains the map. */\r\n");
      out.write("#map {\r\n");
      out.write("\twidth: 50%;\r\n");
      out.write("\theight: 50%;\r\n");
      out.write("}\r\n");
      out.write("/* Optional: Makes the sample page fill the window. */\r\n");
      out.write("html, body {\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body onload=\"getLocation()\">\r\n");
      out.write("\t<nav class=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n");
      out.write("\t\t<a class=\"login100-form-title p-b-49 \" href=\"#\">Tracking</a>\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- Left -->\r\n");
      out.write("\t\t<ul class=\"navbar-nav mr-auto\">\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a class=\"nav-link\" href=\"home\">New Activity</a></li>\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a class=\"nav-link\" href=\"statistics\">Statistic</a></li>\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t\t<!-- Right -->\r\n");
      out.write("\t\t<ul class=\"navbar-nav ml-auto\">\r\n");
      out.write("\t\t\t<li class=\"nav-item\">\r\n");
      out.write("\t\t\t\t<div class=\"nav-link\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t");

						String name = (String) session.getAttribute("full_name");
						String user_id = (String) session.getAttribute("user_id");
						
						if (name == null) {
							response.sendRedirect("/login");

						} else {
							out.print(name);
						}
					
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a class=\"nav-link\" href=\"logout\">\r\n");
      out.write("\t\t\t\t\tLogout\r\n");
      out.write("\t\t\t</a></li>\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t</nav>\r\n");
      out.write("\t\r\n");
      out.write("\t<div id =  \"chart\" > </div>\r\n");
      out.write("\r\n");

			Logger.getLogger("org.mongodb.driver").setLevel(Level.WARNING);
			String uri = "mongodb://admin:walid@tracking-shard-00-00-mwydz.mongodb.net:27017,"
					+ "tracking-shard-00-01-mwydz.mongodb.net:27017,"
					+ "tracking-shard-00-02-mwydz.mongodb.net:27017/test?ssl=true&replicaSet=Tracking-shard-0"
					+ "&authSource=admin&retryWrites=true&w=majority";
			
			// connection to database
			MongoClient mongoClient = MongoClients.create(uri);

			// get collection
			MongoCollection<Document> database_collection = mongoClient.getDatabase("Tracking").getCollection("Activity");
			
			// get email if exist
			List<Document> userList = database_collection.find(Filters.eq("user_id", user_id)).into(new ArrayList<Document>());
			
			 // store chart config name-config value pair
            Map<String, String> chartConfig = new HashMap<String, String>();
            
			 //store label-value pair
            Map<String, Integer> dataValuePair = new HashMap<String, Integer>(); 
			 
            chartConfig.put("caption", name+" Statistic");
            chartConfig.put("subCaption", "All "+name+" Statistic for all Activity");
            chartConfig.put("xAxisName", "Dates");
            chartConfig.put("yAxisName", "Distance (Km)");
            chartConfig.put("numberSuffix", "km");
            chartConfig.put("theme", "fusion");
			
			for (Document users : userList) {
				        dataValuePair.put(users.getString("date"), users.getInteger("distance"));    			
			}
			
			
            StringBuilder jsonData = new StringBuilder();
            StringBuilder data = new StringBuilder();
            // json data to use as chart data source
            jsonData.append("{'chart':{");
            for(Map.Entry conf:chartConfig.entrySet())
            {
                jsonData.append("'" + conf.getKey()+"':'"+conf.getValue() + "',");
            }
            jsonData.replace(jsonData.length() - 1, jsonData.length() ,"},");
            // build  data object from label-value pair
            data.append("'data':[");
            for(Map.Entry pair:dataValuePair.entrySet())
            {
                data.append("{'label':'" + pair.getKey() + "','value':'" + pair.getValue() +"'},");
            }
            data.replace(data.length() - 1, data.length(),"]");
            jsonData.append(data.toString());
            jsonData.append("}");
            
            // Create chart instance
            // charttype, chartID, width, height,containerid, data format, data
            FusionCharts firstChart = new FusionCharts(
                "column2d",
                "first_chart",
                "700",
                "400",
                "chart",
                "json",
                jsonData.toString()
            );
        
      out.write('\r');
      out.write('\n');
      out.print( firstChart.render() );
      out.write(" \r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
